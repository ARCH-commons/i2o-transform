DECLARE
 CURSOR C_HEALTH_PRO_VIEW 
 IS 
  SELECT * FROM HEALTH_PRO_VIEW;
 
  R_HEALTH_PRO_VIEW C_HEALTH_PRO_VIEW%ROWTYPE;
  TYPE PMI_ID_LIST IS VARRAY(1000) OF HEALTH_PRO_VIEW.PMI_ID%TYPE;
  A_NOT_IN_HEALTHPRO PMI_ID_LIST := PMI_ID_LIST();
  V_NOT_IN_HEALTHPRO_COUNTER INTEGER;
  A_LASTNAME_MISMATCH PMI_ID_LIST := PMI_ID_LIST();
  V_LASTNAME_MISMATCH_COUNTER INTEGER;
  A_DOB_MISMATCH PMI_ID_LIST := PMI_ID_LIST();
  V_VALID_COUNTER INTEGER;
  A_VALID PMI_ID_LIST := PMI_ID_LIST();
  V_DOB_MISMATCH_COUNTER INTEGER;
  V_NOT_VALIDATED_COUNTER INTEGER;
  A_NOT_VALIDATED PMI_ID_LIST := PMI_ID_LIST();
  V_WITHDRAWN_COUNTER INTEGER;
  A_WITHDRAWN PMI_ID_LIST := PMI_ID_LIST();
  V_NOT_CONSENTED_TO_EHR_COUNTER INTEGER;
  A_NOT_CONSENTED_TO_EHR PMI_ID_LIST := PMI_ID_LIST();
  V_NOT_CONSENTED_COUNTER INTEGER;
  A_NOT_CONSENTED PMI_ID_LIST := PMI_ID_LIST(); 
  V_SUCCESSFUL BOOLEAN;
  V_FAILED_LASTNAME_CHECK BOOLEAN;
  V_FAILED_DOB_CHECK BOOLEAN;
  V_SHOW_ERRORS BOOLEAN;
  V_SHOW_MAPPINGS BOOLEAN;
BEGIN
------------------------------------------------------------------------------------
-- CHANGE THESE VALUES DEPENDING ON WHAT INFORMATION YOU WANT TO SEE
------------------------------------------------------------------------------------
  V_SHOW_ERRORS := FALSE;
  V_SHOW_MAPPINGS := TRUE;
------------------------------------------------------------------------------------
    --INITIALIZE
  V_NOT_IN_HEALTHPRO_COUNTER := 0;
  V_LASTNAME_MISMATCH_COUNTER := 0;
  V_DOB_MISMATCH_COUNTER := 0;
  V_NOT_VALIDATED_COUNTER :=0;
  V_NOT_CONSENTED_COUNTER := 0;
  V_NOT_CONSENTED_TO_EHR_COUNTER := 0;
  V_WITHDRAWN_COUNTER :=0;
  V_VALID_COUNTER :=0;

  FOR R_HEALTH_PRO_VIEW
  IN C_HEALTH_PRO_VIEW
  LOOP
    V_SUCCESSFUL := TRUE;
    V_FAILED_LASTNAME_CHECK := FALSE;
    V_FAILED_DOB_CHECK := FALSE;
    --CHECK FOR PRESENCE IN HEALTH PRO
    IF R_HEALTH_PRO_VIEW.HP_PMI_ID IS NULL THEN
      V_NOT_IN_HEALTHPRO_COUNTER := V_NOT_IN_HEALTHPRO_COUNTER + 1;
      A_NOT_IN_HEALTHPRO.EXTEND;
      A_NOT_IN_HEALTHPRO(V_NOT_IN_HEALTHPRO_COUNTER) := R_HEALTH_PRO_VIEW.PMI_ID;
      V_SUCCESSFUL := FALSE;
    END IF;
    --CHECK FOR ID_VALIDATION
    IF UPPER(R_HEALTH_PRO_VIEW.VALIDATED_ID) = 'NO' THEN
        V_NOT_VALIDATED_COUNTER := V_NOT_VALIDATED_COUNTER + 1;
        A_NOT_VALIDATED.EXTEND;
        A_NOT_VALIDATED(V_NOT_VALIDATED_COUNTER) := R_HEALTH_PRO_VIEW.PMI_ID;
        V_SUCCESSFUL := FALSE;
    END IF;
    --CHECK FOR CONSENT
    IF R_HEALTH_PRO_VIEW.HP_GENERAL_CONSENT_STATUS != 1 THEN
      V_NOT_CONSENTED_COUNTER := V_NOT_CONSENTED_COUNTER + 1;
      A_NOT_CONSENTED.EXTEND;
      A_NOT_CONSENTED(V_NOT_CONSENTED_COUNTER) := R_HEALTH_PRO_VIEW.HP_PMI_ID;
      V_SUCCESSFUL := FALSE;
    END IF;
    --CHECK FOR CONSENT TO EHR
    IF R_HEALTH_PRO_VIEW.HP_EHR_CONSENT_STATUS != 1 THEN
      V_NOT_CONSENTED_TO_EHR_COUNTER := V_NOT_CONSENTED_TO_EHR_COUNTER + 1;
      A_NOT_CONSENTED_TO_EHR.EXTEND;
      A_NOT_CONSENTED_TO_EHR(V_NOT_CONSENTED_TO_EHR_COUNTER) := R_HEALTH_PRO_VIEW.HP_PMI_ID;
      V_SUCCESSFUL := FALSE;
    END IF;
    --CHECK FOR WITHDRAWAL
    IF R_HEALTH_PRO_VIEW.HP_WITHDRAWAL_STATUS = 1 THEN
      V_WITHDRAWN_COUNTER := V_WITHDRAWN_COUNTER + 1;
      A_WITHDRAWN.EXTEND;
      A_WITHDRAWN(V_WITHDRAWN_COUNTER) := R_HEALTH_PRO_VIEW.HP_PMI_ID;
      V_SUCCESSFUL := FALSE;
    END IF;    
    --CHECK FOR LASTNAME
    IF UPPER(R_HEALTH_PRO_VIEW.HP_LAST_NAME) != UPPER(R_HEALTH_PRO_VIEW.LAST_NAME) THEN
      V_LASTNAME_MISMATCH_COUNTER := V_LASTNAME_MISMATCH_COUNTER + 1;
      A_LASTNAME_MISMATCH.EXTEND;
      A_LASTNAME_MISMATCH(V_LASTNAME_MISMATCH_COUNTER) := R_HEALTH_PRO_VIEW.HP_PMI_ID;
      V_FAILED_LASTNAME_CHECK := TRUE;
    END IF;
    --CHECK FOR DOB
    IF UPPER(R_HEALTH_PRO_VIEW.HP_DATE_OF_BIRTH) != UPPER(R_HEALTH_PRO_VIEW.DATE_OF_BIRTH) THEN
      V_DOB_MISMATCH_COUNTER := V_DOB_MISMATCH_COUNTER + 1;
      A_DOB_MISMATCH.EXTEND;
      A_DOB_MISMATCH(V_DOB_MISMATCH_COUNTER) := R_HEALTH_PRO_VIEW.HP_PMI_ID;
      V_FAILED_DOB_CHECK := TRUE;
    END IF;
    -- IF BOTH FAILED THEN DON'T ADD
    IF (V_FAILED_LASTNAME_CHECK AND V_FAILED_DOB_CHECK) THEN
      V_SUCCESSFUL := FALSE;
    END IF;
    
    --DBMS_OUTPUT.PUT_LINE('DEBUG: Successful: ' || BOOLEAN_TO_VARCHAR(V_SUCCESSFUL) || ', MRN: ' || R_HEALTH_PRO_VIEW.MRN || ', MRN_FACILITY: ' || R_HEALTH_PRO_VIEW.MRN_FACILITY); 
    IF V_SUCCESSFUL AND R_HEALTH_PRO_VIEW.MRN IS NOT NULL AND R_HEALTH_PRO_VIEW.MRN_FACILITY IS NOT NULL THEN
      V_VALID_COUNTER := V_VALID_COUNTER + 1;
      A_VALID.EXTEND;
      A_VALID(V_VALID_COUNTER) := R_HEALTH_PRO_VIEW.HP_PMI_ID;
    END IF;
  END LOOP;
    --REPORT RESULTS
  IF V_SHOW_ERRORS THEN
    --REPORT MISSING PMI_IDS IF ANY
    IF V_NOT_IN_HEALTHPRO_COUNTER > 0 THEN
      DBMS_OUTPUT.PUT_LINE('ERROR: FOLLOWING PMI_IDS ARE IN CONSTRACK BUT NOT IN HEALTHPRO');
      FOR i IN 1..A_NOT_IN_HEALTHPRO.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('' || A_NOT_IN_HEALTHPRO(i));
      END LOOP;
    END IF;
    --REPORT UNVALIDATED IDS IF ANY
    IF V_DOB_MISMATCH_COUNTER > 0 THEN
      DBMS_OUTPUT.PUT_LINE('ERROR: FOLLOWING PMI_IDS ARE FOR PATIENTS WHOS ID HAVE NOT BEEN VALIDATED');
      FOR i IN 1..A_NOT_VALIDATED.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('' || A_NOT_VALIDATED(i));
      END LOOP;
    END IF;
    --REPORT NOT CONSENTED TO THE EHR IF ANY
    IF V_NOT_CONSENTED_COUNTER > 0 THEN
      DBMS_OUTPUT.PUT_LINE('ERROR: FOLLOWING PMI_IDS ARE FOR PATIENTS WHO HAVE NOT CONSENTED');
      FOR i IN 1..A_NOT_CONSENTED.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('' || A_NOT_CONSENTED(i));
      END LOOP;
    END IF;
    --REPORT NOT CONSENTED TO THE EHR IF ANY
    IF V_WITHDRAWN_COUNTER > 0 THEN
      DBMS_OUTPUT.PUT_LINE('ERROR: FOLLOWING PMI_IDS ARE FOR PATIENTS WHO HAVE WITHDRAWN');
      FOR i IN 1..A_WITHDRAWN.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('' || A_WITHDRAWN(i));
      END LOOP;
    END IF;
    --REPORT NOT CONSENTED TO THE EHR IF ANY
    IF A_NOT_CONSENTED_TO_EHR.COUNT > 0 THEN
      DBMS_OUTPUT.PUT_LINE('ERROR: FOLLOWING PMI_IDS ARE FOR PATIENTS WHO HAVE NOT CONSENTED TO THE EHR');
      FOR i IN 1..A_NOT_CONSENTED_TO_EHR.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('' || A_NOT_CONSENTED_TO_EHR(i));
      END LOOP;
    END IF;
    --REPORT MISMATCHED LAST_NAMES IF ANY
    IF V_LASTNAME_MISMATCH_COUNTER > 0 THEN
      DBMS_OUTPUT.PUT_LINE('WARNING: FOLLOWING PMI_IDS ARE FOR PATIENTS WITH LASTNAMES THAT DO NOT MATCH');
      FOR i IN 1..A_LASTNAME_MISMATCH.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('' || A_LASTNAME_MISMATCH(i));
      END LOOP;
    END IF;
    --REPORT MISMATCHED DOB IF ANY
    IF V_DOB_MISMATCH_COUNTER > 0 THEN
      DBMS_OUTPUT.PUT_LINE('WARNING: FOLLOWING PMI_IDS ARE FOR PATIENTS WITH DOBS THAT DO NOT MATCH');
      FOR i IN 1..A_DOB_MISMATCH.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('' || A_DOB_MISMATCH(i));
      END LOOP;
    END IF;
  END IF;
  --REPORT MAPPING
  IF V_SHOW_MAPPINGS THEN 
    IF V_VALID_COUNTER > 0 THEN
      DBMS_OUTPUT.PUT_LINE('MRN, MRN_FACILITY, PMI_ID');
      FOR i IN 1..A_VALID.COUNT LOOP
        SELECT * INTO R_HEALTH_PRO_VIEW FROM HEALTH_PRO_VIEW HPV WHERE HPV.PMI_ID = A_VALID(i); 
        DBMS_OUTPUT.PUT_LINE(R_HEALTH_PRO_VIEW.MRN||', '||R_HEALTH_PRO_VIEW.MRN_FACILITY||', '||TO_NUMBER(SUBSTR(A_VALID(i),2)));
      END LOOP;
    END IF;
  END IF;
END;